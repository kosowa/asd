local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

--------------------------------------------------

-- Services
local HttpService = game:GetService("HttpService")
local saveFileName = "UserSettings.json"

-- Function to load settings
local function loadSettings()
    if isfile(saveFileName) then
        local settingsData = readfile(saveFileName)
        return HttpService:JSONDecode(settingsData)
    else
        return {}
    end
end

-- Function to save settings
local function saveSettings(settings)
    local settingsData = HttpService:JSONEncode(settings)
    writefile(saveFileName, settingsData)
end

-- Load settings on startup
local settings = loadSettings()

--------------------------------------------------

local Window = Fluent:CreateWindow({
    Title = "AntiLag",
    SubTitle = "by zestos",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 400),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl,
    Minimize = true
})

local Tabs = {
    Main = Window:AddTab({ Title = "Optimizer", Icon = "boxes" }),
    Autoplay = Window:AddTab({ Title = "Autoplay", Icon = "play" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options
Window:SelectTab(1)

-- Automatically minimize the window after loading
Window:Minimize()

--------------------------------------------------

-- Black screen GUI setup
local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "RenderingControlGui"
screenGui.IgnoreGuiInset = true  -- Ignore the Roblox top bar inset
screenGui.Parent = playerGui

-- Create black frame
local blackFrame = Instance.new("Frame")
blackFrame.Size = UDim2.new(1, 0, 1, 0)  -- Full screen
blackFrame.BackgroundColor3 = Color3.new(0, 0, 0)  -- Black color
blackFrame.Visible = false  -- Hidden by default
blackFrame.ZIndex = 1
blackFrame.Parent = screenGui

--------------------------------------------------

-- DELETE MAP SECTION
-- Define the global targets table
local targets = {}

-- LOBBY BUILDINGS REMOVE
local lobby = game.Workspace:FindFirstChild("MainLobby")
if lobby then
    local lobbyTargets = {
        lobby:FindFirstChild("Buildings"),
        lobby:FindFirstChild("Circles"),
        lobby:FindFirstChild("Effects"),
        lobby:FindFirstChild("ExpensiveTrees"),
        lobby:FindFirstChild("Fireflies"),
        lobby:FindFirstChild("Folliage"),
        lobby:FindFirstChild("Lights"),
        lobby:FindFirstChild("NoEntry"),
        lobby:FindFirstChild("Plants"),
        lobby:FindFirstChild("Props"),
        lobby:FindFirstChild("Rocks"),
        lobby:FindFirstChild("Trees"),
        lobby:FindFirstChild("Banner"),
        lobby:FindFirstChild("Floor_Raids"),
        lobby:FindFirstChild("Neon Sign 1"),
        lobby:FindFirstChild("Raid_Pillar"),
        lobby:FindFirstChild("Space Ship Green"),
        lobby:FindFirstChild("Space Ship Orange"),
        lobby:FindFirstChild("Thing"),
        lobby:FindFirstChild("Cylinder.072"),
        lobby:FindFirstChild("Cylinder.021"),
    }

    for _, target in ipairs(lobbyTargets) do
        table.insert(targets, target)
    end
else
    print("Main Lobby not found")
end

-- DEMON SLAYER MAP DELETE
local demonSlayerMap = game.Workspace:FindFirstChild("Map")
if demonSlayerMap then
    local demonTargets = {
        demonSlayerMap:FindFirstChild("Effects"),
        demonSlayerMap:FindFirstChild("Foliage"),
        demonSlayerMap:FindFirstChild("Props"),
        demonSlayerMap:FindFirstChild("Rocks"),
        demonSlayerMap:FindFirstChild("Trees"),
        demonSlayerMap:FindFirstChild("Webs"),
        demonSlayerMap:FindFirstChild("Terrain") and demonSlayerMap.Terrain:FindFirstChild("Mountains")
    }

    for _, target in ipairs(demonTargets) do
        table.insert(targets, target)
    end
else
    print("Demon Slayer map not found")
end

-- NAMEK MAP DELETE
local namekMap = game.Workspace:FindFirstChild("Map")
if namekMap then
    local namekTargets = {
        namekMap:FindFirstChild("Bases"),
        namekMap:FindFirstChild("Effects"),
        namekMap:FindFirstChild("Hills"),
        namekMap:FindFirstChild("Namek Structures"),
        namekMap:FindFirstChild("Other Props"),
        namekMap:FindFirstChild("Trees")
    }

    for _, target in ipairs(namekTargets) do
        table.insert(targets, target)
    end
else
    print("Namek map not found")
end

-- Shibuya's Station Map targets
local shibuyaMap = game.Workspace:FindFirstChild("Map")
if shibuyaMap then
    local building = shibuyaMap:FindFirstChild("Building")
    local shibuyaTargets = {
        shibuyaMap:FindFirstChild("Hill Spots"),
        shibuyaMap:FindFirstChild("Invisible Walls"),
        shibuyaMap:FindFirstChild("Pillars"),
        shibuyaMap:FindFirstChild("Rails"),
        shibuyaMap:FindFirstChild("Vents"),
        building and building:FindFirstChild("Stairways"),
        building and building:FindFirstChild("Wall Strips"),
        building and building:FindFirstChild("Lights")
    }

    if building then
        for _, child in ipairs(building:GetChildren()) do
            if child.Name == "default" then
                table.insert(shibuyaTargets, child)
            end
        end
    end

    for _, target in ipairs(shibuyaTargets) do
        table.insert(targets, target)
    end
else
    print("Shibuya's Station map not found")
end

-- Shibuya's LegendStage Map targets
local legendStageMap = game.Workspace:FindFirstChild("Map")
if legendStageMap then
    local objects = legendStageMap:FindFirstChild("Objects")
    
    if objects then
        for _, part in ipairs(objects:GetChildren()) do
            if part.Name ~= "Road Base" then
                table.insert(targets, part)
                print(part.Name .. " marked for removal")
            else
                print(part.Name .. " kept")
            end
        end
    else
        print("Objects not found")
    end
else
    print("LegendStage map not found")
end

-- Function to delete map objects if toggle is on
local function deleteMapObjects()
    for _, target in ipairs(targets) do
        if target then
            target:Destroy()
            print(target.Name .. " removed")
        else
            print("Object not found")
        end
    end
end

--------------------------------------------------
-- BUTTON MINIMIZE
-- Create a ScreenGui and add it to the PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CustomButtonGUI"  -- Unique name
screenGui.ResetOnSpawn = false
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Button creation
local button = Instance.new("ImageButton", screenGui)
button.Position = UDim2.new(0.05, 0, 0.05, 0)
button.Size = UDim2.new(0, 57, 0, 57)
button.Image = "rbxassetid://83204245116453"
button.BackgroundTransparency = 1  -- Make the background fully transparent
button.ScaleType = Enum.ScaleType.Fit  -- Ensures the image fits inside the square
button.ZIndex = 10  -- Set a high ZIndex to ensure it stays above other UI elements

-- Function to minimize Fluent GUI when the button is clicked
button.MouseButton1Click:Connect(function()
    if Window and Window.Minimize then
        Window:Minimize()  -- Trigger the minimize function
    else
        warn("Fluent GUI window not found or minimize function unavailable!")
    end
end)

-- Draggable button logic
local dragging, dragInput, dragStart, startPos
local UserInputService = game:GetService("UserInputService")

local function updateInput(input)
    local delta = input.Position - dragStart
    button.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = button.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

button.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        updateInput(input)
    end
end)

--------------------------------------------------

-- GUI setup for countdown display
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local countdownText = Instance.new("TextLabel", screenGui)
countdownText.Size = UDim2.new(0.3, 0, 0.2, 0)
countdownText.Position = UDim2.new(0.35, 0, 0.4, 0)
countdownText.TextSize = 14
countdownText.BackgroundTransparency = 1
countdownText.TextColor3 = Color3.new(1, 1, 1)
countdownText.Visible = false  -- Initially hidden

-- Function to remove laggy objects and textures
local function removeLaggyObjects()
    countdownText.Visible = true
    for i = 15, 0, -1 do
        countdownText.Text = "Optimizing in " .. i .. " seconds"
        wait(1)
    end
    countdownText.Visible = false
    
    -- Disable unnecessary visual effects
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Decal") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Texture") then
            v:Destroy()
        end
    end

    -- Adjust lighting settings for anti-lag
    local lighting = game:GetService("Lighting")
    lighting.GlobalShadows = false
    lighting.Brightness = 1
    lighting.FogEnd = 9e9
    lighting.EnvironmentDiffuseScale = 0
    lighting.EnvironmentSpecularScale = 0

    -- Adjust terrain settings for anti-lag
    local terrain = workspace:FindFirstChild("Terrain")
    if terrain then
        terrain.WaterTransparency = 0
        terrain.WaterWaveSize = 0
        terrain.WaterWaveSpeed = 0
    end

    -- Remove textures from parts and change material to SmoothPlastic
    for _, part in pairs(workspace:GetDescendants()) do
        if part:IsA("Part") or part:IsA("MeshPart") or part:IsA("UnionOperation") then
            part.Material = Enum.Material.SmoothPlastic

            -- Remove SurfaceGuis, Decals, and Textures
            for _, child in pairs(part:GetDescendants()) do
                if child:IsA("Decal") or child:IsA("Texture") or child:IsA("SurfaceGui") then
                    child:Destroy()
                end
            end
        end
    end
    print("Laggy objects removed and textures disabled")
end

--------------------------------------------------

do
    Tabs.Main:AddParagraph({
        Title = "Optimizer",
        Content = "Optimize your gameplay!"
    })

    Tabs.Autoplay:AddParagraph({
            Title = "UNDER DEVELOPMENT",
            Content = "Pag aralan kopa function ng\nautojoin lobby!"
    })

    -- Toggle BlackScreen
    local blackScreenState = settings["BlackScreen"] or false
    local ToggleBlackScreen = Tabs.Main:AddToggle("MyToggleBlackScreen", { Title = "Black Screen", Default = blackScreenState })

    ToggleBlackScreen:OnChanged(function()
        settings["BlackScreen"] = Options.MyToggleBlackScreen.Value
        saveSettings(settings)
        print("Black Screen Toggle changed:", Options.MyToggleBlackScreen.Value)

        if Options.MyToggleBlackScreen.Value then
            blackFrame.Visible = true
        else
            blackFrame.Visible = false
        end
    end)

    -- Toggle for delete map objects
    local deleteMapState = settings["DeleteMap"] or false
    local ToggleDeleteMap = Tabs.Main:AddToggle("MyToggleDeleteMap", { Title = "Delete Map", Default = deleteMapState })

    ToggleDeleteMap:OnChanged(function()
        settings["DeleteMap"] = Options.MyToggleDeleteMap.Value
        saveSettings(settings)
        print("Delete Map Toggle changed:", Options.MyToggleDeleteMap.Value)
    
        -- Trigger deleteMapObjects() if toggle is enabled
        if Options.MyToggleDeleteMap.Value then
            deleteMapObjects()
        end
    end)

    -- Toggle for remove laggy objects
    local disableTextureState = settings["DisableTexture"] or false
    local ToggleDisableTexture = Tabs.Main:AddToggle("MyToggleDisableTexture", { Title = "Disable Texture", Default = disableTextureState })

    ToggleDisableTexture:OnChanged(function()
        settings["DisableTexture"] = Options.MyToggleDisableTexture.Value
        saveSettings(settings)
        print("Disable Texture Toggle changed:", Options.MyToggleDisableTexture.Value)
        
        if Options.MyToggleDisableTexture.Value then
            removeLaggyObjects()
        end
    end)
end

--------------------------------------------------

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})

InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)

SaveManager:LoadAutoloadConfig()
