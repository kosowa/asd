--4
local replicatedStorage = game:GetService("ReplicatedStorage")
local collectionService = game:GetService("CollectionService")
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer

local hatchFunction = getupvalue(getupvalue(getconnections(replicatedStorage.GameEvents.PetEggService.OnClientEvent)[1].Function, 1), 2)
local eggModels = getupvalue(hatchFunction, 1)
local eggPets = getupvalue(hatchFunction, 2)

local activeEggs = {}
local eggInfoList = {}

local activeHighlights = {}

local petParagraph = nil

local function getObjectFromId(objectId)
	for _, eggModel in pairs(eggModels) do
		if eggModel:GetAttribute("OBJECT_UUID") == objectId then
			return eggModel
		end
	end
end

local function formatTime(seconds)
	seconds = math.max(0, seconds or 0)
	local mins = math.floor(seconds / 60)
	local secs = math.floor(seconds % 60)
	return string.format("%d:%02d", mins, secs)
end

local function getPetNameEggNameDesc()
	local lines = {}
	for _, data in pairs(eggInfoList) do
		local obj = activeEggs[data.id]
		if obj then
			local timeLeft = obj:GetAttribute("TimeToHatch")
			if timeLeft and timeLeft > 0 then
				table.insert(lines, string.format("? (%s) - %s", data.egg, formatTime(timeLeft)))
			elseif data.pet and data.pet ~= "?" then
				table.insert(lines, string.format("%s (%s) - Ready", data.pet, data.egg))
			else
				table.insert(lines, string.format("? (%s) - Ready", data.egg))
			end
		end
	end
	return #lines > 0 and table.concat(lines, "\n") or "No pets yet"
end

local function clearAllHighlights()
	for _, h in pairs(activeHighlights) do
		if h.Highlight then h.Highlight:Destroy() end
		if h.Billboard then h.Billboard:Destroy() end
	end
	activeHighlights = {}
end

local function createHighlight(object, petName)
	local highlight = Instance.new("Highlight")
	highlight.Adornee = object
	highlight.FillColor = Color3.fromRGB(0, 255, 0)
	highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
	highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
	highlight.Parent = object

	local billboard = Instance.new("BillboardGui")
	billboard.Adornee = object
	billboard.Size = UDim2.new(0, 100, 0, 30)
	billboard.StudsOffset = Vector3.new(0, 3, 0)
	billboard.AlwaysOnTop = true
	billboard.Parent = object

	local textLabel = Instance.new("TextLabel")
	textLabel.Size = UDim2.new(1, 0, 1, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.TextColor3 = Color3.new(1, 1, 0)
	textLabel.TextStrokeTransparency = 0
	textLabel.Text = petName
	textLabel.TextScaled = true
	textLabel.Font = Enum.Font.SourceSansBold
	textLabel.Parent = billboard

	activeHighlights[object] = {
		Highlight = highlight,
		Billboard = billboard,
	}
end

local function refreshPetPredictParagraph()
	if petParagraph then
		petParagraph:SetDesc(getPetNameEggNameDesc())
	end

	clearAllHighlights()
	for _, data in pairs(eggInfoList) do
		if data.pet and data.pet ~= "?" then
			local obj = activeEggs[data.id]
			if obj then
				createHighlight(obj, data.pet)
			end
		end
	end
end


petParagraph = Tabs.Secret:Paragraph({
	Title = "EGG PET NAMES LIST",
	Desc = getPetNameEggNameDesc(),
	Image = "egg",
	Color = "Grey",
})
local pendingHatch = {}

task.spawn(function()
	while true do
		task.wait(1)
		for _, data in pairs(eggInfoList) do
			local obj = activeEggs[data.id]
			if obj and data.pet == "?" then
				local timeLeft = obj:GetAttribute("TimeToHatch")
				if timeLeft and timeLeft <= 0 and not pendingHatch[data.id] then
					pendingHatch[data.id] = true -- Mark as waiting for hatch event
				end
			end
		end
		refreshPetPredictParagraph()
	end
end)

local function UpdateEggPetName(objectId, petName)
	local object = getObjectFromId(objectId)
	if not object then return end
	for _, data in pairs(eggInfoList) do
		if data.id == objectId then
			data.pet = petName
			refreshPetPredictParagraph()
			return
		end
	end
end

local function RegisterEgg(object)
	if object:GetAttribute("OWNER") ~= localPlayer.Name then return end

	local eggName = object:GetAttribute("EggName")
	local objectId = object:GetAttribute("OBJECT_UUID")
	if not objectId then return end

	local petName = eggPets[objectId] or "?"

	activeEggs[objectId] = object
	table.insert(eggInfoList, {
		egg = eggName,
		pet = petName,
		id = objectId,
	})

	task.defer(refreshPetPredictParagraph)
end

local function RemoveEgg(object)
	if object:GetAttribute("OWNER") ~= localPlayer.Name then return end
	local objectId = object:GetAttribute("OBJECT_UUID")
	activeEggs[objectId] = nil

	for i, data in ipairs(eggInfoList) do
		if data.id == objectId then
			table.remove(eggInfoList, i)
			break
		end
	end

	task.defer(refreshPetPredictParagraph)
end


for _, obj in collectionService:GetTagged("PetEggServer") do
	task.spawn(RegisterEgg, obj)
end

collectionService:GetInstanceAddedSignal("PetEggServer"):Connect(RegisterEgg)
collectionService:GetInstanceRemovedSignal("PetEggServer"):Connect(RemoveEgg)

local old
old = hookfunction(getconnections(replicatedStorage.GameEvents.EggReadyToHatch_RE.OnClientEvent)[1].Function, newcclosure(function(objectId, petName)
	pendingHatch[objectId] = nil
	UpdateEggPetName(objectId, petName)
	return old(objectId, petName)
end))

-----------------------------------------------------

PetNeededState = settings["PetNeeded"] or {}

PetNeededDropdown = Tabs.Secret:Dropdown({
	Title = "Desire Pet",
	Value = PetNeededState,
	Multi = true,
	AllowNone = true,
	Values = {
		"Queen Bee",
		"Dragonfly",
		"Polar Bear",
		"Disco Bee",
		"Butterfly",
		"Raccoon",
		"Red Fox",
	},
	Callback = function(selected)
		settings["PetNeeded"] = selected
		saveSettings(settings)
	end,
})


PetNeededServerHopState = settings["ServerHopNeedPet"] or false
Tabs.Secret:Toggle({
	Title = "Server Hop Desire Pet",
	Value = PetNeededServerHopState,
	Icon = "check",
	Type = "Checkbox",
	Callback = function(val)
		settings["ServerHopNeedPet"] = val
		saveSettings(settings)
	end,
})

task.spawn(function()
	local HttpService = game:GetService("HttpService")

	local function sendWebhookNotification(petName)
		local url = PetWebhookUrl
		if not url or url == "" then return end

		local discordId = PetDiscordUserID
		local content = discordId and ("<@" .. discordId .. ">") or ""

		local data = {
			content = content,
			embeds = {{
				title = "ðŸŽ‰ Pet Found!",
				description = "A desired pet has been detected in the egg list.",
				color = 65280,
				fields = {
					{ name = "Pet Name", value = petName, inline = true },
				},
				thumbnail = {
					url = "https://media.discordapp.net/attachments/942805757936672821/1355577698273202258/MCNRSnewLOGO.png?ex=68485b9c&is=68470a1c&hm=a3b1f2fcbe95e55c332875b31474cc5cd598af2e34295cf0186b6cde5c2ae757&=&format=webp&quality=lossless&width=764&height=764"
				},
				footer = { text = "MERCENARIES" },
				timestamp = DateTime.now():ToIsoDate(),
			}},
		}

		local success, err = pcall(function()
			HttpService:PostAsync(url, HttpService:JSONEncode(data), Enum.HttpContentType.ApplicationJson)
		end)

		if not success then
			warn("Failed to send webhook:", err)
		end
	end

	while task.wait(6) do
		if settings["ServerHopNeedPet"] then
			local found = false
			for _, data in pairs(eggInfoList) do
				if table.find(settings["PetNeeded"] or {}, data.pet) then
					found = true
					settings["ServerHopNeedPet"] = false
					saveSettings(settings)

					--this is not from my webhook, i dont get any data from yours
					sendWebhookNotification(data.pet)

					WindUI:Notify({
						Title = "Desire Pet Detected",
						Icon = "check",
						Duration = 5, 
					})

					print("[SERVER HOP] Desired pet found! Cancelling server hop.")
					break
				end
			end

			if not found then
				WindUI:Notify({
					Title = "No Desire Pet Detected",
					Icon = "x",
					Duration = 5, 
				})
                task.wait(3)

				local TeleportService = game:GetService("TeleportService")
				local placeId = game.PlaceId
				TeleportService:Teleport(placeId)
			end
		end
	end
end)

-- DISCLAIMER: I dont get any data or information from them
-- DISCLAIMER: only user can see their URL
local PetWebhookUrlInput = Tabs.Secret:Input({
	Title = "Webhook URL",
	Value = PetWebhookUrl,
	PlaceholderText = "Enter URL...",
	ClearTextOnFocus = false,
	Callback = function(Text)
		settings["PetWebhookUrl"] = Text
		saveSettings(settings)
		PetWebhookUrl = Text
	end
})

-- DISCLAIMER: only user can see their USERID
local PetDiscordUserIDInput = Tabs.Secret:Input({
	Title = "Discord User ID",
	Value = PetDiscordUserID,
	PlaceholderText = "Enter ID...",
	ClearTextOnFocus = false,
	Callback = function(Text)
		settings["PetDiscordUserID"] = Text
		saveSettings(settings)
		PetDiscordUserID = Text
	end
})
