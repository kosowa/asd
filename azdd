local replicatedStorage = game:GetService("ReplicatedStorage")
local collectionService = game:GetService("CollectionService")
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer

-- Get hatchFunction and internal data
local hatchFunction = getupvalue(getupvalue(getconnections(replicatedStorage.GameEvents.PetEggService.OnClientEvent)[1].Function, 1), 2)
local eggModels = getupvalue(hatchFunction, 1)
local eggPets = getupvalue(hatchFunction, 2)

-- Tables
local activeEggs = {}
local eggInfoList = {}

-- Get object by UUID
local function getObjectFromId(objectId)
	for _, eggModel in pairs(eggModels) do
		if eggModel:GetAttribute("OBJECT_UUID") == objectId then
			return eggModel
		end
	end
end

-- Update hatched pet info
local function UpdateEggPetName(objectId, petName)
	local object = getObjectFromId(objectId)
	if not object then return end

	local eggName = object:GetAttribute("EggName")
	for _, data in pairs(eggInfoList) do
		if data.id == objectId then
			data.pet = petName
			refreshPetPredictDropdown()
			return
		end
	end
end

-- Store egg info
local function RegisterEgg(object)
	if object:GetAttribute("OWNER") ~= localPlayer.Name then return end

	local eggName = object:GetAttribute("EggName")
	local petName = eggPets[object:GetAttribute("OBJECT_UUID")]
	local objectId = object:GetAttribute("OBJECT_UUID")
	if not objectId then return end

	activeEggs[objectId] = object

	table.insert(eggInfoList, {
		egg = eggName,
		pet = petName or "?",
		id = objectId,
	})
	refreshPetPredictDropdown()
end

-- Cleanup
local function RemoveEgg(object)
	if object:GetAttribute("OWNER") ~= localPlayer.Name then return end
	local objectId = object:GetAttribute("OBJECT_UUID")
	activeEggs[objectId] = nil
end

-- Setup existing eggs
for _, object in collectionService:GetTagged("PetEggServer") do
	task.spawn(RegisterEgg, object)
end

-- Connect future eggs
collectionService:GetInstanceAddedSignal("PetEggServer"):Connect(RegisterEgg)
collectionService:GetInstanceRemovedSignal("PetEggServer"):Connect(RemoveEgg)

-- Hook hatch event
local old
old = hookfunction(getconnections(replicatedStorage.GameEvents.EggReadyToHatch_RE.OnClientEvent)[1].Function, newcclosure(function(objectId, petName)
	UpdateEggPetName(objectId, petName)
	return old(objectId, petName)
end))

-- === UI Code ===

-- Get dropdown values (pet names with duplicates)
local function getAllPetNamesWithDuplicates()
	local list = {}
	for _, data in pairs(eggInfoList) do
		if data.pet and data.pet ~= "?" then
			table.insert(list, data.pet)
		end
	end
	-- Return empty list if none found
	return list or {}
end

-- Get dropdown description text (petname + eggname)
local function getPetNameEggNameDesc()
	local lines = {}
	for _, data in pairs(eggInfoList) do
		if data.pet and data.pet ~= "?" then
			table.insert(lines, data.pet .. " (" .. data.egg .. ")")
		end
	end
	-- Return empty string if none found
	if #lines == 0 then
		return ""
	end
	return table.concat(lines, "\n")
end

-- Reference to dropdown for updates
local PetPredictDropdown = nil

function refreshPetPredictDropdown()
	if PetPredictDropdown then
		local values = getAllPetNamesWithDuplicates()
		PetPredictDropdown:SetValues(values)
		PetPredictDropdown:SetDesc(getPetNameEggNameDesc())
	end
end

-- Highlight and ESP management
local activeHighlights = {}

local function clearAllHighlights()
	for _, highlightData in pairs(activeHighlights) do
		if highlightData.Highlight then
			highlightData.Highlight:Destroy()
		end
		if highlightData.Billboard then
			highlightData.Billboard:Destroy()
		end
	end
	activeHighlights = {}
end

local function createHighlight(object, petName)
	-- Highlight
	local highlight = Instance.new("Highlight")
	highlight.Adornee = object
	highlight.FillColor = Color3.fromRGB(255, 255, 0)
	highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
	highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
	highlight.Parent = object

	-- ESP Label
	local billboard = Instance.new("BillboardGui")
	billboard.Adornee = object
	billboard.Size = UDim2.new(0, 100, 0, 30)
	billboard.StudsOffset = Vector3.new(0, 3, 0)
	billboard.AlwaysOnTop = true
	billboard.Parent = object

	local textLabel = Instance.new("TextLabel")
	textLabel.Size = UDim2.new(1, 0, 1, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.TextColor3 = Color3.new(1, 1, 0)
	textLabel.TextStrokeTransparency = 0
	textLabel.Text = petName
	textLabel.TextScaled = true
	textLabel.Font = Enum.Font.SourceSansBold
	textLabel.Parent = billboard

	activeHighlights[object] = {
		Highlight = highlight,
		Billboard = billboard,
	}
end

function refreshPetPredictHighlights(selectedPets)
	clearAllHighlights()
	for _, data in pairs(eggInfoList) do
		if table.find(selectedPets, data.pet) then
			local eggObject = activeEggs[data.id]
			if eggObject then
				createHighlight(eggObject, data.pet)
			end
		end
	end
end

-- Create dropdown UI
PetPredictDropdown = Tabs.Secret:Dropdown({
	Title = "Egg Pet Names List",
	Desc = getPetNameEggNameDesc(),
	Value = {},
	Multi = true,
	AllowNone = true,
	Values = getAllPetNamesWithDuplicates(),
	Callback = function(selected)
		refreshPetPredictHighlights(selected)
	end,
})
